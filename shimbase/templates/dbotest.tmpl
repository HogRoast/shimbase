# coding: utf-8

import os
from datetime import datetime
from unittest import TestCase
from unittest.mock import MagicMock, call
from dataclasses import FrozenInstanceError
from {{LibName}}{{TableName}} import {{CapTableName}}, {{CapTableName}}Keys, {{CapTableName}}Values
from shimbase.database import Database, AdhocKeys
from shimbase.sqlite3impl import SQLite3Impl

class Test{{CapTableName}}(TestCase):
    """{{CapTableName}} object tests"""
    db = None

    @classmethod
    def setUpClass(cls):
        createName = {{Schema}}
        testDataName = {{DataOutPath}} + '*_data.sql' 
        dbName = './db/test.db'
        os.system('cat {} | sqlite3 {}'.format(createName, dbName))
        os.system('cat {} | sqlite3 {}'.format(testDataName, dbName))
        cls.db = Database(dbName, SQLite3Impl())

    @classmethod
    def tearDownClass(cls):
        cls.db.close()

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_keys_Immutablility(self):
        keys ={{CapTableName}}Keys({{PKTestDataList}})

        with self.assertRaises(FrozenInstanceError) as cm:
            {{PKTestDataAssign}}
        self.assertIn('cannot assign to field', cm.exception.args[0])

    def test_keys_adhoc(self):
        l = {{CapTableName}}.createAdhoc(AdhocKeys(None))
        self.assertEqual(l.getTable(), '{{TableName}}')
        self.assertTrue(l._keys.getFields() is None)

    def test_createSingle(self):
        obj = {{CapTableName}}.createSingle(({{AllTestDataList}}))

        {{PKTestDataAssertEqual}} 
        {{ValueTestDataAssertEqual}} 

    def test_createMulti(self):
        rows = [{{AllTestDataRows}}]
        objs = {{CapTableName}}.createMulti(rows)
        
        self.assertEqual(len(objs), 2)
        {{PKTestDataAssertEqualIdx0}}
        {{ValueTestDataAssertEqualIdx0}}
        {{PKTestDataAssertEqualIdx1}}
        {{ValueTestDataAssertEqualIdx1}}

    def test_repr(self):
        obj = {{CapTableName}}({{AllTestDataList}})
        self.assertEqual(str(obj), "{{TableName}} : Keys {{PKTestDataDict}} : Values {{ValueTestDataDict}}")

    def test_select(self):
        objs = Test{{CapTableName}}.db.select({{CapTableName}}())
        self.assertEqual(len(objs), 2)
        {{PKTestDataAssertEqualIdx0}}
        {{ValueTestDataAssertEqualIdx0}}
        {{PKTestDataAssertEqualIdx1}}
        {{ValueTestDataAssertEqualIdx1}}
        
        objs = Test{{CapTableName}}.db.select({{CapTableName}}({{PKTestDataList}}))
        self.assertEqual(len(objs), 1)
        {{PKTestDataAssertEqualIdx0}}
        {{ValueTestDataAssertEqualIdx0}}

        objs = Test{{CapTableName}}.db.select({{CapTableName}}.createAdhoc(AdhocKeys({{ValueTestDataDict}})))
        self.assertEqual(len(objs), 1)
        {{PKTestDataAssertEqualIdx0}}
        {{ValueTestDataAssertEqualIdx0}}

    def test_update(self):
        # Disable Foreign Keys checks for this test
        Test{{CapTableName}}.db.disableForeignKeys()

        with Test{{CapTableName}}.db.transaction() as t:
            Test{{CapTableName}}.db.upsert(
                    {{CapTableName}}({{PKTestDataList}}, {{NewValueTestDataList}}))
            objs = Test{{CapTableName}}.db.select({{CapTableName}}({{PKTestDataList}}))

            self.assertEqual(len(objs), 1)
            {{PKTestDataAssertEqualIdx0}}

            d = eval("{{NewValueTestDataDict}}")
            for k, v in d.items():
                self.assertEqual(
                        objs[0].__getattribute__('get' + k.title())(), v)

            # force a rollback
            t.fail()

        with Test{{CapTableName}}.db.transaction() as t:
            {{TableName}} = Test{{CapTableName}}.db.select({{CapTableName}}({{PKTestDataList}}))[0]
            for k, v in d.items():
                {{TableName}}.__getattribute__('set' + k.title())(v)

            Test{{CapTableName}}.db.upsert({{TableName}})

            objs = Test{{CapTableName}}.db.select({{CapTableName}}({{PKTestDataList}}))
            self.assertEqual(len(objs), 1)
            {{PKTestDataAssertEqualIdx0}}

            for k, v in d.items():
                self.assertEqual(
                        objs[0].__getattribute__('get' + k.title())(), v)

            # force a rollback
            t.fail()

    def test_insert(self):
        # Disable Foreign Keys checks for this test
        Test{{CapTableName}}.db.disableForeignKeys()

        with Test{{CapTableName}}.db.transaction() as t:
            Test{{CapTableName}}.db.upsert(
                    {{CapTableName}}({{NewPKTestDataList}}, {{NewValueTestDataList}}))
            objs = Test{{CapTableName}}.db.select({{CapTableName}}())

            self.assertEqual(len(objs), 3)

            d = eval("{{NewPKTestDataDict}}")
            for k, v in d.items():
                self.assertEqual(
                        objs[2].__getattribute__('get' + k.title())(), v)

            d = eval("{{NewValueTestDataDict}}")
            for k, v in d.items():
                self.assertEqual(
                        objs[2].__getattribute__('get' + k.title())(), v)

            # force a rollback
            t.fail()

    def test_delete(self):
        # Disable Foreign Keys checks for this test
        Test{{CapTableName}}.db.disableForeignKeys()

        with Test{{CapTableName}}.db.transaction() as t:
            Test{{CapTableName}}.db.delete({{CapTableName}}({{PKTestDataList}}))

            objs = Test{{CapTableName}}.db.select({{CapTableName}}())
            self.assertEqual(len(objs), 1)

            # force a rollback
            t.fail()

    def test_isNullable(self):
        obj = {{CapTableName}}()
        self.assertTrue({{AllTestDataIsNullable}}) 

if __name__ == '__main__':
    import unittest
    unittest.main()
